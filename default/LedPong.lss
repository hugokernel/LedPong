
LedPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800080  00800080  000002f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000086  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000029d  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000191  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000319  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000129  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000056  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_8>
  24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 00 	call	0xba	; 0xba <main>
  8a:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_4>:

    DBUGOFF;
}

ISR(TIMER2_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1

}
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_14>:

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1

}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:
    TCCR0 = ((1<<CS02) | (0<<CS01) | (1<<CS00));
    TCCR0 = 0;
    TCNT0 = 0;
*/
    // Timer 1 configuration : Scroll message
    TIMSK |= (1<<TOIE1);
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	89 bf       	out	0x39, r24	; 57
    TCCR1A = 0;
  c0:	1f bc       	out	0x2f, r1	; 47
    TCCR1B |= ((0<<CS12) | (1<<CS11) | (0<<CS10));
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	8e bd       	out	0x2e, r24	; 46
//    TCCR1C  = 0;
    TCNT1 = 0;
  c8:	1d bc       	out	0x2d, r1	; 45
  ca:	1c bc       	out	0x2c, r1	; 44

//    USART_Init();
//    stdout = &mystdout;


    DDRA = 255;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
    DDRB = 255;
  d0:	87 bb       	out	0x17, r24	; 23
    DDRC = 255;
  d2:	84 bb       	out	0x14, r24	; 20
    DDRD = 255;
  d4:	81 bb       	out	0x11, r24	; 17
    
    PORTA = 0;
  d6:	1b ba       	out	0x1b, r1	; 27
    PORTB = 0;
  d8:	18 ba       	out	0x18, r1	; 24
    PORTC = 0;
  da:	15 ba       	out	0x15, r1	; 21
    PORTD = 0;
  dc:	12 ba       	out	0x12, r1	; 18

    cli();
  de:	f8 94       	cli
  e0:	28 e8       	ldi	r18, 0x88	; 136
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0


    t = 0;
    for (y = 0; y < 8; y++) {
        for (x = 0; x < 8; x++) {
            buffer[y][x] = 255;
  e8:	4f ef       	ldi	r20, 0xFF	; 255
  ea:	0b c0       	rjmp	.+22     	; 0x102 <main+0x48>
  ec:	41 93       	st	Z+, r20
*/


    t = 0;
    for (y = 0; y < 8; y++) {
        for (x = 0; x < 8; x++) {
  ee:	e2 17       	cp	r30, r18
  f0:	f3 07       	cpc	r31, r19
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x32>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	9f 01       	movw	r18, r30
  f8:	28 5f       	subi	r18, 0xF8	; 248
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
    }
*/


    t = 0;
    for (y = 0; y < 8; y++) {
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	91 05       	cpc	r25, r1
 100:	49 f0       	breq	.+18     	; 0x114 <main+0x5a>
 102:	fc 01       	movw	r30, r24
 104:	53 e0       	ldi	r21, 0x03	; 3
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	5a 95       	dec	r21
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x4c>
 10e:	e0 58       	subi	r30, 0x80	; 128
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	ec cf       	rjmp	.-40     	; 0xec <main+0x32>
            _delay_ms(200);
            //_delay_us(250);
        }
    }
*/
    POWER_MAX;
 114:	c0 9a       	sbi	0x18, 0	; 24
 116:	c1 9a       	sbi	0x18, 1	; 24
 118:	c2 9a       	sbi	0x18, 2	; 24
 11a:	c3 9a       	sbi	0x18, 3	; 24
    sei();
 11c:	78 94       	sei
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x64>

00000120 <drawScreen>:
    }

    PORTA = out;
}

inline void drawScreen() {
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	60 e6       	ldi	r22, 0x60	; 96
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	2f c0       	rjmp	.+94     	; 0x18c <drawScreen+0x6c>
    unsigned char x, y, value = 0;

    for (x = 0; x < 8; x++) {
        for (y = 0; y < 8; y++) {
            
            value = buffer[x][y];
 12e:	2c 91       	ld	r18, X

            if (value) {
 130:	22 23       	and	r18, r18
 132:	89 f0       	breq	.+34     	; 0x156 <drawScreen+0x36>
                    case 1: PORTB = 2; break;
                    case 2: PORTB = 4; break;
                    case 3: PORTB = 8; break;
                }
*/
                PORTB = value;
 134:	28 bb       	out	0x18, r18	; 24

}

inline void clearScreen() {
    
    PORTA = 0;
 136:	1b ba       	out	0x1b, r1	; 27
    
    // TODO : mettre un AND
    PORTC = PORTD = 0;
 138:	12 ba       	out	0x12, r1	; 18
 13a:	22 b3       	in	r18, 0x12	; 18
 13c:	25 bb       	out	0x15, r18	; 21

    volatile uint8_t *port;

    clearScreen();

    port = map_x[x][0];
 13e:	eb 01       	movw	r28, r22
 140:	28 81       	ld	r18, Y
 142:	30 e0       	ldi	r19, 0x00	; 0
    *port = map_x[x][1];
 144:	49 81       	ldd	r20, Y+1	; 0x01
 146:	e9 01       	movw	r28, r18
 148:	48 83       	st	Y, r20

    // TODO : mettre un AND
    port = map_y[y][0];
 14a:	20 81       	ld	r18, Z
 14c:	30 e0       	ldi	r19, 0x00	; 0
    *port = map_y[y][1];
 14e:	41 81       	ldd	r20, Z+1	; 0x01
 150:	e9 01       	movw	r28, r18
 152:	48 83       	st	Y, r20
 154:	0a c0       	rjmp	.+20     	; 0x16a <drawScreen+0x4a>
	...

}

inline void clearScreen() {
    
    PORTA = 0;
 162:	1b ba       	out	0x1b, r1	; 27
    
    // TODO : mettre un AND
    PORTC = PORTD = 0;
 164:	12 ba       	out	0x12, r1	; 18
 166:	22 b3       	in	r18, 0x12	; 18
 168:	25 bb       	out	0x15, r18	; 21
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
 16a:	c5 e5       	ldi	r28, 0x55	; 85
 16c:	d8 e0       	ldi	r29, 0x08	; 8
 16e:	21 97       	sbiw	r28, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <drawScreen+0x4e>
                __asm("nop");
                clearScreen();
            }

            _delay_us(400);
            PORTB = 0;
 172:	18 ba       	out	0x18, r1	; 24
 174:	11 96       	adiw	r26, 0x01	; 1
 176:	32 96       	adiw	r30, 0x02	; 2
inline void drawScreen() {

    unsigned char x, y, value = 0;

    for (x = 0; x < 8; x++) {
        for (y = 0; y < 8; y++) {
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	e0 38       	cpi	r30, 0x80	; 128
 17c:	f2 07       	cpc	r31, r18
 17e:	b9 f6       	brne	.-82     	; 0x12e <drawScreen+0xe>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	6e 5f       	subi	r22, 0xFE	; 254
 184:	7f 4f       	sbci	r23, 0xFF	; 255

inline void drawScreen() {

    unsigned char x, y, value = 0;

    for (x = 0; x < 8; x++) {
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	91 05       	cpc	r25, r1
 18a:	59 f0       	breq	.+22     	; 0x1a2 <drawScreen+0x82>
 18c:	dc 01       	movw	r26, r24
 18e:	e3 e0       	ldi	r30, 0x03	; 3
 190:	aa 0f       	add	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	ea 95       	dec	r30
 196:	e1 f7       	brne	.-8      	; 0x190 <drawScreen+0x70>
 198:	a0 58       	subi	r26, 0x80	; 128
 19a:	bf 4f       	sbci	r27, 0xFF	; 255
 19c:	e0 e7       	ldi	r30, 0x70	; 112
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	c6 cf       	rjmp	.-116    	; 0x12e <drawScreen+0xe>

            _delay_us(400);
            PORTB = 0;
        }
    }
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_8>:
//TCNT0 = 210;
    //TCNT0 = 200;
}

ISR(TIMER1_OVF_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
//    TCNT1H = speed_table[scroll_speed];
//    TCNT1L = 0;
    DBUGON;
 1ca:	96 9a       	sbi	0x12, 6	; 18
    drawScreen();
 1cc:	0e 94 90 00 	call	0x120	; 0x120 <drawScreen>
    //TCNT1H = 238;
    //TCNT1L = 250;
    //delay_us(1000);

    DBUGOFF;
 1d0:	96 98       	cbi	0x12, 6	; 18
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_9>:
#include "LedPong.h"



ISR(TIMER0_OVF_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
        }
    }

    TCNT0 = 0;
*/
    cli();
 216:	f8 94       	cli
//    DBUGON;
    drawScreen();
 218:	0e 94 90 00 	call	0x120	; 0x120 <drawScreen>
    sei();
 21c:	78 94       	sei
    //_delay_ms(10);
//    DBUGOFF;

//TCNT0 = 210;
    //TCNT0 = 200;
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
